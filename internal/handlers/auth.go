package handlers

import (
	"encoding/json"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"gomessage/internal/crypto"
	"gomessage/internal/models"
)

// Register –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func Register(c *gin.Context) {
	var req models.UserRegisterRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: " + err.Error(),
		})
		return
	}

	cryptoService := crypto.NewCryptoService()
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
	salt, err := cryptoService.GenerateSalt()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ª–∏",
		})
		return
	}

	hash, err := cryptoService.HashPassword(req.Password, salt)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è",
		})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: username='%s', email='%s'", req.Username, req.Email)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
	if models.GlobalUserStore.IsUsernameTaken(req.Username) {
		log.Printf("‚ùå Username '%s' —É–∂–µ –∑–∞–Ω—è—Ç", req.Username)
		c.JSON(http.StatusConflict, gin.H{
			"error": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ",
		})
		return
	}
	
	if models.GlobalUserStore.IsEmailTaken(req.Email) {
		log.Printf("‚ùå Email '%s' —É–∂–µ –∑–∞–Ω—è—Ç", req.Email)
		c.JSON(http.StatusConflict, gin.H{
			"error": "–ü–æ—á—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞",
		})
		return
	}
	
	user, err := models.GlobalUserStore.CreateUser(req.Username, req.Email, hash, salt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error(),
		})
		return
	}
	
	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s (ID: %d)", user.Username, user.ID)

	c.JSON(http.StatusCreated, gin.H{
		"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
		"user": gin.H{
			"username": user.Username,
			"email":    user.Email,
		},
	})
}

// Login –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func Login(c *gin.Context) {
	var req models.UserLoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: " + err.Error(),
		})
		return
	}

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	log.Printf("üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: username='%s'", req.Username)
	
	user, err := models.GlobalUserStore.GetUserByUsername(req.Username)
	if err != nil {
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", req.Username)
		// –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
		})
		return
	}
	
	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s (ID: %d)", user.Username, user.ID)
	
	cryptoService := crypto.NewCryptoService()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ç–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ö–µ—à–∞
	if !cryptoService.VerifyPassword(req.Password, user.Password, user.Salt) {
		log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s'", req.Username)
		c.JSON(http.StatusUnauthorized, gin.H{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
		})
		return
	}
	
	log.Printf("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s'", req.Username)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	payloadObj := map[string]interface{}{
		"user_id":  user.ID,
		"username": user.Username,
		"exp":      time.Now().Add(24 * time.Hour).Unix(),
	}
	payloadBytes, _ := json.Marshal(payloadObj)
	token, err := cryptoService.GenerateJWT(string(payloadBytes), "your-secret-key")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
		"token":   token,
		"user": gin.H{
			"id":       user.ID,
			"username": user.Username,
		},
	})
}

// RefreshToken –æ–±–Ω–æ–≤–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω
func RefreshToken(c *gin.Context) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	c.JSON(http.StatusOK, gin.H{
		"message": "Token refreshed",
		"token":   "new_token_here",
	})
}
